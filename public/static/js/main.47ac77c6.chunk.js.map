{"version":3,"sources":["store/modules/User.ts","components/Profile/Profile.tsx","components/PostList/PostItem/PostComments/PostComment/PostComment.tsx","components/PostList/PostItem/PostComments/CommentCreate/CommentCreate.tsx","components/PostList/PostItem/PostComments/PostComments.tsx","store/modules/Post.ts","components/PostList/PostItem/PostItem.tsx","components/PostList/PostCreate/PostCreate.tsx","components/PostList/PostList.tsx","App.tsx","serviceWorker.ts","store/sagas/Post.ts","store/sagas/User.ts","store/index.ts","index.tsx"],"names":["loginClear","token","userData","type","payload","userError","err","initialState","loginData","User","state","action","alert","Profile","id","password","handleIDInput","e","value","target","setState","handlePasswordInput","this","props","dispatchRegister","dispatchLogin","user","userID","ProfileWrap","Input","placeholder","onChange","ActionWrap","Button","onClick","React","Component","connect","dispatch","register","login","styled","div","input","button","PostComment","handleDeleteComment","a","item","Axios","delete","_id","headers","Authorization","CommentWrapper","owner","content","li","CommentCreate","handleContentInput","handleCreatePost","post","data","CommentCreateWrap","ContentInput","PostComments","isShowComments","commentList","handleToggleShowComments","handleCommentReload","get","map","key","PostCommentsWrapper","ShowButton","CommentList","getComments","ul","getPostListClear","postError","postList","Post","PostItem","dispatchDeletePost","PostItemWrap","Title","title","Content","PostDelete","deletePost","article","h2","p","PostCreate","handleTitleInput","dispatchPostCreate","PostCreateWrap","TitleInput","CreateButton","createPost","textarea","PostList","handleReloadPost","dispatchGetPostList","list","reverse","PropListWrap","ReloadButton","getPostItems","section","App","className","Boolean","window","location","hostname","match","getPostListSaga","watchGetPostList","createPostSaga","watchCreatePost","deletePostSaga","watchDeletePost","put","takeEvery","registerSaga","watchRegister","loginSaga","watchLogin","rootSaga","all","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.47ac77c6.chunk.js","sourcesContent":["import IUser, { IUserDefaultLogin } from \"../../schema/User\";\r\n\r\nexport const REGISTER = \"User/REGISTER\" as const;\r\nexport const LOGIN = \"User/LOGIN\" as const;\r\n\r\nexport const REGISTER_CLEAR = \"User/REGISTER_CLEAR\" as const;\r\nexport const LOGIN_CLEAR = \"User/LOGIN_CLEAR\" as const;\r\n\r\nexport const USER_ERROR = \"User/USER_ERROR\" as const;\r\n\r\nexport const register = (loginData: IUserDefaultLogin) => ({\r\n\ttype: REGISTER,\r\n\tpayload: loginData,\r\n});\r\nexport const login = (loginData: IUserDefaultLogin) => ({\r\n\ttype: LOGIN,\r\n\tpayload: loginData,\r\n});\r\n\r\nexport const registerClear = (result: boolean) => ({\r\n\ttype: REGISTER_CLEAR,\r\n\tpayload: result,\r\n});\r\nexport const loginClear = (token: string, userData: IUser) => ({\r\n\ttype: LOGIN_CLEAR,\r\n\tpayload: { token, userData },\r\n});\r\n\r\nexport const userError = (err: Error) => ({\r\n\ttype: USER_ERROR,\r\n\tpayload: err,\r\n});\r\n\r\nexport type UserAction = ReturnType<typeof register> | ReturnType<typeof login> | ReturnType<typeof registerClear> | ReturnType<typeof loginClear> | ReturnType<typeof userError>;\r\ninterface UserState {\r\n\ttoken: string;\r\n\tloginData: any; // TODO: User 스키마 구현\r\n}\r\n\r\nconst initialState: UserState = {\r\n\ttoken: \"\",\r\n\tloginData: {},\r\n};\r\n\r\nfunction User(state: UserState = initialState, action: UserAction) {\r\n\tswitch (action.type) {\r\n\t\tcase LOGIN_CLEAR:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\ttoken: action.payload.token,\r\n\t\t\t\tloginData: action.payload.userData,\r\n\t\t\t};\r\n\t\t\t\r\n\t\tcase USER_ERROR:\r\n\t\t\talert(\"ERROR\")\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport default User;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { connect } from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\nimport { RootState } from \"../../store\";\r\nimport IUser, { IUserDefaultLogin } from \"../../schema/User\";\r\nimport { register, login } from \"../../store/modules/User\";\r\n\r\ninterface Props {\r\n\tdispatchRegister(loginData: IUserDefaultLogin): void;\r\n\tdispatchLogin(loginData: IUserDefaultLogin): void;\r\n\tuser: IUser | null;\r\n}\r\ninterface States {\r\n\tid: string;\r\n\tpassword: string;\r\n}\r\nclass Profile extends React.Component<Props, States> {\r\n\tstate = {\r\n\t\tid: \"\",\r\n\t\tpassword: \"\",\r\n\t} as States;\r\n\trender() {\r\n\t\tconst { dispatchRegister, dispatchLogin, user } = this.props;\r\n\t\tlet { id, password } = this.state;\r\n\t\tif (user?.userID) return <ProfileWrap>{user!.userID}님</ProfileWrap>;\r\n\t\telse\r\n\t\t\treturn (\r\n\t\t\t\t<ProfileWrap>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<Input placeholder=\"id\" type=\"text\" onChange={this.handleIDInput}></Input>\r\n\t\t\t\t\t\t<Input placeholder=\"password\" type=\"password\" onChange={this.handlePasswordInput}></Input>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<ActionWrap>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\tdispatchLogin({ userID: id, password });\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t로그인\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\tdispatchRegister({ userID: id, password });\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t회원가입\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</ActionWrap>\r\n\t\t\t\t</ProfileWrap>\r\n\t\t\t);\r\n\t}\r\n\thandleIDInput = (e: React.ChangeEvent) => {\r\n\t\tlet { value } = e.target as HTMLInputElement;\r\n\t\tthis.setState({\r\n\t\t\tid: value,\r\n\t\t});\r\n\t};\r\n\thandlePasswordInput = (e: React.ChangeEvent) => {\r\n\t\tlet { value } = e.target as HTMLInputElement;\r\n\t\tthis.setState({\r\n\t\t\tpassword: value,\r\n\t\t});\r\n\t};\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n\treturn { user: state.User.loginData };\r\n};\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n\treturn { dispatchRegister: (loginData: IUserDefaultLogin) => dispatch(register(loginData)), dispatchLogin: (loginData: IUserDefaultLogin) => dispatch(login(loginData)) };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);\r\n\r\nconst ProfileWrap = styled.div`\r\n\tmax-width: 300px;\r\n\twidth: 100%;\r\n\theight: fit-content;\r\n\r\n\tbox-shadow: 0px 5px 20px rgba(0, 0, 0, 0.1);\r\n\tbackground-color: white;\r\n\r\n\tpadding: 20px;\r\n\tmargin-top: 20px;\r\n\r\n\tborder-radius: 10px;\r\n`;\r\nconst ActionWrap = styled.div`\r\n\tdisplay: flex;\r\n\tjustify-content: flex-end;\r\n`;\r\nconst Input = styled.input`\r\n\tborder: none;\r\n\toutline: none;\r\n\r\n\tpadding: 10px;\r\n\r\n\twidth: 100%;\r\n\tmargin-bottom: 10px;\r\n\r\n\tbox-shadow: 0px 2px 10px rgba(0, 0, 0, 0.1);\r\n`;\r\nconst Button = styled.button`\r\n\tcursor: pointer;\r\n\tborder: none;\r\n\toutline: none;\r\n\tbackground: none;\r\n\r\n\tpadding: 10px;\r\n\tmargin-left: 10px;\r\n\r\n\tbox-shadow: 0px 2px 10px rgba(0, 0, 0, 0.1);\r\n\r\n\ttransition: 0.2s;\r\n\r\n\t&:hover {\r\n\t\tbox-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);\r\n\t}\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport IComment from \"../../../../../schema/Comment\";\r\nimport Axios from \"axios\";\r\nimport { connect } from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\nimport { RootState } from \"../../../../../store\";\r\nimport IUser from \"../../../../../schema/User\";\r\ninterface Props {\r\n\titem: IComment;\r\n\ttoken: string;\r\n\tuser: IUser;\r\n\tonChange(): void;\r\n}\r\n\r\nclass PostComment extends React.Component<Props> {\r\n\trender() {\r\n\t\tlet { item, user } = this.props;\r\n\t\treturn (\r\n\t\t\t<CommentWrapper>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t{item.owner.userID}:{item.content}\r\n\t\t\t\t</p>\r\n\t\t\t\t{user._id == item.owner._id && <button onClick={this.handleDeleteComment}>x</button>}\r\n\t\t\t</CommentWrapper>\r\n\t\t);\r\n\t}\r\n\thandleDeleteComment = async () => {\r\n\t\tlet { onChange, item, token } = this.props;\r\n\t\tawait Axios.delete(`/comment/${item._id}`, {\r\n\t\t\theaders: {\r\n\t\t\t\tAuthorization: token,\r\n\t\t\t},\r\n\t\t});\r\n\t\tonChange();\r\n\t};\r\n}\r\nconst mapStateToProps = (state: RootState) => {\r\n\tconst { loginData, token } = state.User;\r\n\treturn { user: loginData, token };\r\n};\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n\treturn {};\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PostComment);\r\n\r\nconst CommentWrapper = styled.li`\r\n\tpadding: 10px;\r\n\r\n\tdisplay: flex;\r\n\tjustify-content: space-between;\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Dispatch } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { RootState } from \"../../../../../store\";\r\nimport IPost from \"../../../../../schema/Post\";\r\nimport Axios from \"axios\";\r\n\r\ninterface Props {\r\n\tpost: IPost;\r\n\tonChange(): void;\r\n\ttoken: string;\r\n}\r\ninterface States {\r\n\tcontent: string;\r\n}\r\n\r\nclass CommentCreate extends React.Component<Props, States> {\r\n\tstate = {\r\n\t\tcontent: \"\",\r\n\t} as States;\r\n\trender() {\r\n\t\tconst { token } = this.props;\r\n\t\tif (token)\r\n\t\t\treturn (\r\n\t\t\t\t<CommentCreateWrap>\r\n\t\t\t\t\t<ContentInput placeholder=\"내용\" onChange={this.handleContentInput}></ContentInput>\r\n\t\t\t\t\t<button onClick={this.handleCreatePost}>작성</button>\r\n\t\t\t\t</CommentCreateWrap>\r\n\t\t\t);\r\n\t\telse return <CommentCreateWrap></CommentCreateWrap>;\r\n\t}\r\n\thandleContentInput = (e: React.ChangeEvent) => {\r\n\t\tlet { value } = e.target as HTMLInputElement;\r\n\t\tthis.setState({\r\n\t\t\tcontent: value,\r\n\t\t});\r\n\t};\r\n\thandleCreatePost = async () => {\r\n\t\tconst { token, post, onChange } = this.props;\r\n\t\tconst { content } = this.state;\r\n\t\tlet { data } = await Axios.post(\r\n\t\t\t`/comment`,\r\n\t\t\t{ content, post: post._id },\r\n\t\t\t{\r\n\t\t\t\theaders: {\r\n\t\t\t\t\tAuthorization: token,\r\n\t\t\t\t},\r\n\t\t\t}\r\n\t\t);\r\n\t\tonChange();\r\n\t};\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n\tconst { token } = state.User;\r\n\treturn { token };\r\n};\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n\treturn {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentCreate);\r\n\r\nconst CommentCreateWrap = styled.div`\r\n\tmargin-top: 10px;\r\n\r\n\tdisplay: flex;\r\n`;\r\n\r\nconst ContentInput = styled.input`\r\n\tborder: none;\r\n\toutline: none;\r\n\r\n\tpadding: 10px;\r\n\twidth: 100%;\r\n\r\n\tbox-shadow: 0px 2px 10px rgba(0, 0, 0, 0.1);\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport PostComment from \"./PostComment/PostComment\";\r\nimport IComment from \"../../../../schema/Comment\";\r\nimport CommentCreate from \"./CommentCreate/CommentCreate\";\r\nimport IPost from \"../../../../schema/Post\";\r\nimport Axios from \"axios\";\r\n\r\ninterface States {\r\n\tisShowComments: boolean;\r\n\tcommentList: IComment[];\r\n}\r\nclass PostComments extends React.Component<{ post: IPost }, States> {\r\n\tstate = {\r\n\t\tisShowComments: false,\r\n\t\tcommentList: [],\r\n\t} as States;\r\n\tgetComments() {\r\n\t\t// TODO: Redux 연동 (임시값)\r\n\t\tlet { commentList } = this.state;\r\n\r\n\t\treturn commentList.map((item) => <PostComment onChange={this.handleCommentReload} item={item} key={item._id}></PostComment>);\r\n\t}\r\n\r\n\thandleToggleShowComments = async () => {\r\n\t\tlet { isShowComments } = this.state;\r\n\t\tif (!isShowComments) {\r\n\t\t\tawait this.handleCommentReload();\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tisShowComments: !isShowComments,\r\n\t\t});\r\n\t};\r\n\thandleCommentReload = async () => {\r\n\t\tlet { commentList } = this.state;\r\n\t\tlet { post } = this.props;\r\n\t\tlet { data } = await Axios.get(`/post/${post._id}/get-comments`);\r\n\t\tcommentList = data.data;\r\n\t\tthis.setState({\r\n\t\t\tcommentList,\r\n\t\t});\r\n\t};\r\n\trender() {\r\n\t\tlet { isShowComments } = this.state;\r\n\t\tlet { post } = this.props;\r\n\t\treturn (\r\n\t\t\t<PostCommentsWrapper>\r\n\t\t\t\t<ShowButton onClick={this.handleToggleShowComments}>댓글 보기</ShowButton>\r\n\t\t\t\t{isShowComments && <CommentCreate onChange={this.handleCommentReload} post={post}></CommentCreate>}\r\n\t\t\t\t{isShowComments && <CommentList>{this.getComments()}</CommentList>}\r\n\t\t\t</PostCommentsWrapper>\r\n\t\t);\r\n\t}\r\n}\r\nexport default PostComments;\r\nconst PostCommentsWrapper = styled.div``;\r\nconst CommentList = styled.ul`\r\n\tlist-style: none;\r\n`;\r\n\r\nconst ShowButton = styled.button`\r\n\tcursor: pointer;\r\n\tborder: none;\r\n\toutline: none;\r\n\r\n\tbackground: none;\r\n\tbox-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);\r\n\r\n\tpadding: 10px;\r\n\r\n\t&:hover {\r\n\t\tfilter: brightness(1.1);\r\n\t}\r\n`;\r\n","import IPost from \"../../schema/Post\";\r\n\r\nexport const GET_POST_LIST = \"Post/GET_POST_LIST\" as const;\r\nexport const CREATE_POST = \"Post/CREATE_POST\" as const;\r\nexport const DELETE_POST = \"Post/DELETE_POST\" as const;\r\n\r\nexport const GET_POST_LIST_CLEAR = \"Post/GET_POST_LIST_CLEAR\" as const;\r\nexport const CREATE_POST_CLEAR = \"Post/CREATE_POST_CLEAR\" as const;\r\nexport const DELETE_POST_CLEAR = \"Post/DELETE_POST_CLEAR\" as const;\r\n\r\nexport const POST_ERROR = \"Post/POST_ERROR\" as const;\r\n\r\nexport const getPostList = () => ({\r\n\ttype: GET_POST_LIST,\r\n\tpayload: null,\r\n});\r\nexport const createPost = (token: string, post: IPost) => ({\r\n\ttype: CREATE_POST,\r\n\tpayload: { token, post },\r\n});\r\nexport const deletePost = (token: string, post: IPost) => ({\r\n\ttype: DELETE_POST,\r\n\tpayload: { token, post },\r\n});\r\n\r\nexport const getPostListClear = (data: IPost[]) => ({\r\n\ttype: GET_POST_LIST_CLEAR,\r\n\tpayload: data,\r\n});\r\nexport const createPostClear = () => ({\r\n\ttype: CREATE_POST_CLEAR,\r\n\tpayload: null,\r\n});\r\nexport const deletePostClear = () => ({\r\n\ttype: DELETE_POST_CLEAR,\r\n\tpayload: null,\r\n});\r\n\r\nexport const postError = (err: Error) => ({\r\n\ttype: POST_ERROR,\r\n\tpayload: err,\r\n});\r\n\r\nexport type PostAction =\r\n\t| ReturnType<typeof getPostList>\r\n\t| ReturnType<typeof createPost>\r\n\t| ReturnType<typeof deletePost>\r\n\t| ReturnType<typeof getPostListClear>\r\n\t| ReturnType<typeof createPostClear>\r\n\t| ReturnType<typeof deletePostClear>\r\n\t| ReturnType<typeof postError>;\r\n\r\ninterface PostState {\r\n\tpostList: IPost[];\r\n}\r\n\r\nconst initialState: PostState = {\r\n\tpostList: [],\r\n};\r\n\r\nfunction Post(state: PostState = initialState, action: PostAction) {\r\n\tswitch (action.type) {\r\n\t\tcase GET_POST_LIST_CLEAR:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tpostList: action.payload,\r\n\t\t\t};\r\n\t\tcase POST_ERROR:\r\n\t\t\talert(\"ERROR\");\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport default Post;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport PostComments from \"./PostComments/PostComments\";\r\nimport IPost from \"../../../schema/Post\";\r\nimport { Dispatch } from \"redux\";\r\nimport { RootState } from \"../../../store\";\r\nimport IUser from \"../../../schema/User\";\r\nimport { connect } from \"react-redux\";\r\nimport { deletePost } from \"../../../store/modules/Post\";\r\n\r\ninterface Props {\r\n\titem: IPost;\r\n\tuser: IUser;\r\n\ttoken: string;\r\n\tdispatchDeletePost(token: string, post: IPost): void;\r\n}\r\nclass PostItem extends React.Component<Props, {}> {\r\n\trender() {\r\n\t\tlet { item, user, token, dispatchDeletePost } = this.props;\r\n\t\treturn (\r\n\t\t\t<PostItemWrap>\r\n\t\t\t\t<Title>\r\n\t\t\t\t\t{item.title}({item.owner!.userID})\r\n\t\t\t\t</Title>\r\n\t\t\t\t<Content>{item.content}</Content>\r\n\t\t\t\t<ActionWrap>\r\n\t\t\t\t\t{user!._id === item.owner!._id && <PostDelete onClick={() => dispatchDeletePost(token, item)}>글 삭제</PostDelete>}\r\n\t\t\t\t\t<PostComments post={item}></PostComments>\r\n\t\t\t\t</ActionWrap>\r\n\t\t\t</PostItemWrap>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n\tconst { loginData, token } = state.User;\r\n\treturn { user: loginData, token };\r\n};\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n\treturn {\r\n\t\tdispatchDeletePost: (token: string, post: IPost) => {\r\n\t\t\tdispatch(deletePost(token, post));\r\n\t\t},\r\n\t};\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PostItem);\r\n\r\nconst PostItemWrap = styled.article`\r\n\tpadding: 20px;\r\n\r\n\tmargin: 20px;\r\n\r\n\tborder-radius: 10px;\r\n\r\n\tbox-shadow: 0px 5px 20px rgba(0, 0, 0, 0.1);\r\n\tbackground-color: white;\r\n`;\r\nconst ActionWrap = styled.div`\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n`;\r\nconst PostDelete = styled.button`\r\n\tcursor: pointer;\r\n\tborder: none;\r\n\toutline: none;\r\n\r\n\twidth: fit-content;\r\n\r\n\tbackground: none;\r\n\tbox-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);\r\n\r\n\tpadding: 10px;\r\n\r\n\tmargin-bottom: 10px;\r\n\r\n\t&:hover {\r\n\t\tfilter: brightness(1.1);\r\n\t}\r\n`;\r\n\r\nconst Title = styled.h2`\r\n\tmargin-bottom: 10px;\r\n`;\r\nconst Content = styled.p`\r\n\tmargin-bottom: 10px;\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { createPost } from \"../../../store/modules/Post\";\r\nimport IPost from \"../../../schema/Post\";\r\nimport { Dispatch } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { RootState } from \"../../../store\";\r\n\r\ninterface Props {\r\n\tdispatchPostCreate(token: string, post: IPost): void;\r\n\ttoken: string;\r\n}\r\ninterface States {\r\n\ttitle: string;\r\n\tcontent: string;\r\n}\r\n\r\nclass PostCreate extends React.Component<Props, States> {\r\n\tstate = {\r\n\t\ttitle: \"\",\r\n\t\tcontent: \"\",\r\n\t} as States;\r\n\trender() {\r\n\t\tconst { dispatchPostCreate, token } = this.props;\r\n\t\tconst { title, content } = this.state;\r\n\t\treturn (\r\n\t\t\t<PostCreateWrap>\r\n\t\t\t\t<TitleInput placeholder=\"제목\" onChange={this.handleTitleInput}></TitleInput>\r\n\t\t\t\t<ContentInput placeholder=\"내용\" onChange={this.handleContentInput}></ContentInput>\r\n\t\t\t\t<ActionWrap>\r\n\t\t\t\t\t<CreateButton\r\n\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\tdispatchPostCreate(token, { title, content });\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t글 쓰기\r\n\t\t\t\t\t</CreateButton>\r\n\t\t\t\t</ActionWrap>\r\n\t\t\t</PostCreateWrap>\r\n\t\t);\r\n\t}\r\n\thandleTitleInput = (e: React.ChangeEvent) => {\r\n\t\tlet { value } = e.target as HTMLInputElement;\r\n\t\tthis.setState({\r\n\t\t\ttitle: value,\r\n\t\t});\r\n\t};\r\n\thandleContentInput = (e: React.ChangeEvent) => {\r\n\t\tlet { value } = e.target as HTMLInputElement;\r\n\t\tthis.setState({\r\n\t\t\tcontent: value,\r\n\t\t});\r\n\t};\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n\tconst { token } = state.User;\r\n\treturn { token };\r\n};\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n\treturn { dispatchPostCreate: (token: string, post: IPost) => dispatch(createPost(token, post)) };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PostCreate);\r\n\r\nconst PostCreateWrap = styled.div`\r\n\tpadding: 20px;\r\n\r\n\tmargin: 20px;\r\n\r\n\tborder-radius: 10px;\r\n\r\n\tbox-shadow: 0px 5px 20px rgba(0, 0, 0, 0.1);\r\n\tbackground-color: white;\r\n`;\r\n\r\nconst TitleInput = styled.input`\r\n\tborder: none;\r\n\toutline: none;\r\n\r\n\tpadding: 10px;\r\n\r\n\twidth: 100%;\r\n\tmargin-bottom: 10px;\r\n\r\n\tbox-shadow: 0px 2px 10px rgba(0, 0, 0, 0.1);\r\n`;\r\nconst ContentInput = styled.textarea`\r\n\tborder: none;\r\n\toutline: none;\r\n\r\n\tpadding: 10px;\r\n\twidth: 100%;\r\n\tmin-height: 6em;\r\n\r\n\tmargin-bottom: 10px;\r\n\r\n\tbox-shadow: 0px 2px 10px rgba(0, 0, 0, 0.1);\r\n`;\r\nconst ActionWrap = styled.div`\r\n\twidth: 100%;\r\n\r\n\tdisplay: flex;\r\n\tjustify-content: flex-end;\r\n`;\r\nconst CreateButton = styled.button`\r\n\tcursor: pointer;\r\n\tborder: none;\r\n\toutline: none;\r\n\tbackground: none;\r\n\r\n\tpadding: 10px;\r\n\r\n\tbox-shadow: 0px 2px 10px rgba(0, 0, 0, 0.1);\r\n\r\n\ttransition: 0.2s;\r\n\r\n\t&:hover {\r\n\t\tbox-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);\r\n\t}\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport PostItem from \"./PostItem/PostItem\";\r\nimport IPost from \"../../schema/Post\";\r\nimport { connect } from \"react-redux\";\r\nimport { getPostList } from \"../../store/modules/Post\";\r\nimport { RootState } from \"../../store\";\r\nimport { Dispatch } from \"redux\";\r\nimport PostCreate from \"./PostCreate/PostCreate\";\r\n\r\ninterface Props {\r\n\tdispatchGetPostList(): void;\r\n\tlist: IPost[];\r\n\ttoken: string;\r\n}\r\nclass PostList extends React.Component<Props> {\r\n\tconstructor(props: Props) {\r\n\t\tsuper(props);\r\n\t\tthis.handleReloadPost();\r\n\t}\r\n\thandleReloadPost = () => {\r\n\t\tconst { dispatchGetPostList } = this.props;\r\n\t\tdispatchGetPostList();\r\n\t};\r\n\tgetPostItems() {\r\n\t\tlet { list } = this.props;\r\n\t\tlist.reverse();\r\n\t\treturn list.map((item: IPost) => <PostItem item={item} key={item._id}></PostItem>);\r\n\t}\r\n\trender() {\r\n\t\tlet { token } = this.props;\r\n\t\treturn (\r\n\t\t\t<PropListWrap>\r\n\t\t\t\t<ReloadButton onClick={this.handleReloadPost}>새로고침</ReloadButton>\r\n\t\t\t\t{token && <PostCreate></PostCreate>}\r\n\t\t\t\t{this.getPostItems()}\r\n\t\t\t</PropListWrap>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n\tconst { postList } = state.Post;\r\n\tconst { token } = state.User;\r\n\treturn { list: postList, token };\r\n};\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n\treturn { dispatchGetPostList: () => dispatch(getPostList()) };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PostList);\r\n\r\nconst PropListWrap = styled.section`\r\n\twidth: 100%;\r\n\tmax-width: 720px;\r\n\theight: 100%;\r\n\r\n\toverflow-y: scroll;\r\n\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n`;\r\n\r\nconst ReloadButton = styled.button`\r\n\tcursor: pointer;\r\n\tborder: none;\r\n\toutline: none;\r\n\tbackground: none;\r\n\r\n\tpadding: 10px;\r\n\r\n\tmargin: 20px;\r\n\r\n\tbox-shadow: 0px 2px 10px rgba(0, 0, 0, 0.1);\r\n\tbackground-color: white;\r\n\r\n\ttransition: 0.2s;\r\n\r\n\t&:hover {\r\n\t\tbox-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);\r\n\t}\r\n`;\r\n","import React from \"react\";\nimport \"./App.scss\";\nimport Profile from \"./components/Profile/Profile\";\nimport PostList from \"./components/PostList/PostList\";\n\nclass App extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"app\">\n\t\t\t\t<Profile></Profile>\n\t\t\t\t<PostList></PostList>\n\t\t\t\t<nav className=\"nav\"></nav>\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import Axios from \"axios\";\r\nimport { takeEvery, put } from \"redux-saga/effects\";\r\nimport { GET_POST_LIST, getPostListClear, createPostClear, deletePostClear, postError, DELETE_POST, CREATE_POST, PostAction, createPost, deletePost, getPostList } from \"../modules/Post\";\r\n\r\nexport function* getPostListSaga() {\r\n\ttry {\r\n\t\tconst { data } = yield Axios.get(`/post`);\r\n\t\tyield put(getPostListClear(data.data));\r\n\t} catch (err) {\r\n\t\tyield put(postError(err));\r\n\t}\r\n}\r\n\r\nexport function* watchGetPostList() {\r\n\tyield takeEvery(GET_POST_LIST, getPostListSaga);\r\n}\r\n\r\nexport function* createPostSaga(action: PostAction) {\r\n\ttry {\r\n\t\tconst { post, token } = (action as ReturnType<typeof createPost>).payload;\r\n\t\tconst { data } = yield Axios.post(`/post`, post, {\r\n\t\t\theaders: {\r\n\t\t\t\tAuthorization: token,\r\n\t\t\t},\r\n\t\t});\r\n\t\tyield put(getPostList());\r\n\t\tyield put(createPostClear());\r\n\t} catch (err) {\r\n\t\tyield put(postError(err));\r\n\t}\r\n}\r\n\r\nexport function* watchCreatePost() {\r\n\tyield takeEvery(CREATE_POST, createPostSaga);\r\n}\r\n\r\nexport function* deletePostSaga(action: PostAction) {\r\n\ttry {\r\n\t\tconst { post, token } = (action as ReturnType<typeof deletePost>).payload;\r\n\t\tconst { data } = yield Axios.delete(`/post/${post._id}`, {\r\n\t\t\theaders: {\r\n\t\t\t\tAuthorization: token,\r\n\t\t\t},\r\n\t\t});\r\n\t\tyield put(getPostList());\r\n\t\tyield put(deletePostClear());\r\n\t} catch (err) {\r\n\t\tyield put(postError(err));\r\n\t}\r\n}\r\n\r\nexport function* watchDeletePost() {\r\n\tyield takeEvery(DELETE_POST, deletePostSaga);\r\n}\r\n","import Axios from \"axios\";\r\nimport { takeEvery, put } from \"redux-saga/effects\";\r\nimport { registerClear, userError, UserAction, REGISTER, LOGIN, loginClear } from \"../modules/User\";\r\n\r\nexport function* registerSaga(action: UserAction) {\r\n\ttry {\r\n\t\tconst { data } = yield Axios.post(`/auth/user`, action.payload);\r\n\t\tyield put(registerClear(true));\r\n\t} catch (err) {\r\n\t\tyield put(userError(err));\r\n\t}\r\n}\r\n\r\nexport function* watchRegister() {\r\n\tyield takeEvery(REGISTER, registerSaga);\r\n}\r\n\r\nexport function* loginSaga(action: UserAction) {\r\n\ttry {\r\n\t\tconst { data } = yield Axios.post(`/auth/user/login`, action.payload);\r\n\t\tconst token = data.data;\r\n\t\tconst { data: userData } = yield Axios.post(\r\n\t\t\t`/auth/user/my`,\r\n\t\t\t{},\r\n\t\t\t{\r\n\t\t\t\theaders: {\r\n\t\t\t\t\tAuthorization: token,\r\n\t\t\t\t},\r\n\t\t\t}\r\n\t\t);\r\n\t\tyield put(loginClear(token, userData.data));\r\n\t} catch (err) {\r\n\t\tyield put(userError(err));\r\n\t}\r\n}\r\n\r\nexport function* watchLogin() {\r\n\tyield takeEvery(LOGIN, loginSaga);\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport { watchGetPostList, watchCreatePost, watchDeletePost } from \"./sagas/Post\";\r\nimport { all } from \"redux-saga/effects\";\r\nimport Post from \"./modules/Post\";\r\nimport User from \"./modules/User\";\r\nimport { watchRegister, watchLogin } from \"./sagas/User\";\r\n\r\nconst rootReducer = combineReducers({\r\n\tPost,\r\n\tUser,\r\n});\r\n\r\nexport function* rootSaga() {\r\n\tyield all([watchGetPostList(), watchRegister(), watchLogin(), watchCreatePost(), watchDeletePost()]);\r\n}\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\nexport default rootReducer;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootReducer, { rootSaga } from \"./store\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(rootReducer, applyMiddleware(sagaMiddleware));\n\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}